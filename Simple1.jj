// Bureau

options {
  STATIC = true;
}

PARSER_BEGIN(Simple1)

import java.io.* ;
import java.util.* ;

class Automate {
  public Etat first;
  public Etat last;
  public Automate(){
    this.first = new Etat();
    this.last = new Etat();
  }
}

class Etat {
  public int id;
  static int nb = 1;
  public Etat(){
    this.id = nb++;
  }
}

class Manager {
  public static int[][] tab = new int[70][8];
  public static HashMap<String, String> Comps = new HashMap<String, String>();

  public void add(int i,int j,String e){
    this.tab[i][7] = 1 ;
    this.tab[j][7] = 1 ;
    switch (e) {
      case "Click":
        this.tab[i][0] = j ;
        break;
      case "Dbclick":
        this.tab[i][1] = j ;
        break;
      case "ChrKeyPress":
        this.tab[i][2] = j ;
        break;
      case "NumKeyPress":
        this.tab[i][3] = j ;
        break;
      case "EntrerKeyPress":
        this.tab[i][4] = j ;
        break;
      case "Drag":
        this.tab[i][5] = j ;
        break;
      case "Drop":
        this.tab[i][6] = j ;
        break;

      default:
        break;
    }
  }

  public void update(int k,int j){

    // copy
    for (int i = 0; i < 7; i++) {
      if (this.tab[j][i]==0 && this.tab[k][i]!=0) {
        this.tab[j][i] = this.tab[k][i];
      }
    }
    // update
    for (int i = 0; i < 70; i++) {
      for (int m = 0; m < 7; m++) {
        if (this.tab[i][m] == k) {
          this.tab[i][m] = j ;
        }
      }
    }

    this.tab[k][7] = 0 ;
  }
}


class Simple1 {

  
  public static void main(String args[]) throws ParseException, FileNotFoundException {
    
    try {
      Simple1 parser = new Simple1(new FileInputStream("Prog.ihm"));
      parser.Input();
    } catch(FileNotFoundException ex){ }

    try
    {
        PrintWriter pr = new PrintWriter("Automate.aef");    

        for (int i = 1; i < 70; i++) {
          if (Manager.tab[i][7] == 1) {
            pr.println("Etat("+i+") : Click("+Manager.tab[i][0]+"), Dbclick("+Manager.tab[i][1]+"), Drag("+Manager.tab[i][5]+")");
          }
        }

        pr.close();
    }
    catch (Exception e)
    {
        e.printStackTrace();
        System.out.println("No such file exists.");
    }

    try
    {
        PrintWriter pr = new PrintWriter("Composants.gui"); 

        for (String name: Manager.Comps.keySet()){
          String key =name.toString();
          String value = Manager.Comps.get(name).toString();  
          pr.println(key + ": " + value);  
        } 

        pr.close();
    }
    catch (Exception e)
    {
        e.printStackTrace();
        System.out.println("No such file exists.");
    }
  }

}

PARSER_END(Simple1)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <KWDEBUT: "DEBUT">
| <KWINTER: "INTERFACE">
| <KWCOMP: "COMP">
| <KWINIT: "INITIALISATION">
| <KWACT: "ACTIONS">
| <KWEVT: "EVT">
| <KWPROP: "PROP">

| <KWTWOP: ":">
| <KWPV: ";">
| <KWEQU: "=">

| <ALTERNATIVE: "+">
| <CHOIX: "$">

| <TYPE: "Fenetre" | "Menu" | "Caneva" | "Bouton" | "Bouton">
| <PROPTYPE: "BOOLEAN" | "INT" >
| < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
}


void Input() :
{
  Token id, type, p, t ;
  String[] Types = new String[5];
  int i = 0;
  String prop = "";
}

{
  <KWDEBUT>
  <KWINTER>

  /** COMP */
  (
    {prop = "[ "; }

    <KWCOMP> id = <ID> <KWTWOP> type = <TYPE> <KWPV>

    <KWPROP>
      ( p = <ID> <KWTWOP> (t = <PROPTYPE> | "{" t = <ID> (","<ID>)* "}" )  <KWPV>
        {prop += p.image + ": "+ t.image +" ; ";}
      )*
    <KWEVT>
    {prop += "]";}
    {Manager.Comps.put(id.image+" ("+type.image+")", prop);}
  )*

  <KWACT>
  A()

  <EOF>
}

/** Actions section. */

Automate A():
{
  Automate a;
  Token id;
}
{
  "{" a=A() "}" Y(a) {return a;}
  | 
  a = Event() {return a;}
}

Automate Event():
{
  Automate a1;
  Token id;
  Manager m = new Manager();
}
{
  {a1=new Automate();}
  
  id=<ID> "(" <ID> ")"

  {m.add(a1.first.id , a1.last.id , id.image);}

  Y(a1)
  
  {return a1;}
}

void Y(Automate ag):
{
  Automate ad, tmp;
  Manager m = new Manager();
}

{
  <KWPV> ad=A()
  {
    m.update(ad.first.id , ag.last.id);

    ag.last = ad.last;

    tmp=new Automate();
    tmp.first=ag.first;
    tmp.last=ad.last;
  }

  Y(tmp)

  | <CHOIX> ad=A()
  {
    m.update(ad.first.id,ag.first.id);
    m.update(ad.last.id,ag.last.id);


    tmp=new Automate();
    tmp.first=ag.first;
    tmp.last=ad.last;
  }
  Y(tmp) 

  | <ALTERNATIVE> ad=A()
  {
    m.update(ad.first.id,ag.first.id);

    tmp=new Automate(); 
    tmp.first=ag.first;
    
  }
  Y(tmp) 
  | ("a")*
}

