// Bureau

options {
  STATIC = true;
}

PARSER_BEGIN(Simple1)

import java.io.* ;
import java.util.* ;

class Automate {
  public Etat first;
  public Etat last;
  public Automate(){
    this.first = new Etat();
    this.last = new Etat();
  }
}

class Etat {
  public int id;
  static int nb = 1;
  public Etat(){
    this.id = nb++;
  }
}

class Next {
  public HashMap<Integer, String> next ;

  public Next(){
    this.next = new HashMap<Integer, String>();
  }
}

class Manager {
  public static Next[][] tab = new Next[70][8];
  public static HashMap<String, String> Comps = new HashMap<String, String>();

  public void Init(){
    for (int i = 0; i < 70; i++) {
      for (int m = 0; m < 8; m++) {
        this.tab[i][m] = new Next();
      }
    }
  }

  public static String mapToString(int i,int j){
    String s="";
    for (int name: tab[i][j].next.keySet()){
      s+="\t\t"+tab[i][j].next.get(name).toString()+" --> ";
      s+=name+"\n";
    }
    return s;
  }

  public void add(int i,int j,String e,String to){
    this.tab[i][7].next.put(1,"$");
    this.tab[j][7].next.put(1,"$");
    switch (e) {
      case "Click":
        this.tab[i][0].next.put(j,to);
        break;
      case "Dbclick":
        this.tab[i][1].next.put(j,to);
        break;
      case "ChrKeyPress":
        this.tab[i][2].next.put(j,to);
        break;
      case "NumKeyPress":
        this.tab[i][3].next.put(j,to);
        break;
      case "EntrerKeyPress":
        this.tab[i][4].next.put(j,to);
        break;
      case "Drag":
        this.tab[i][5].next.put(j,to);
        break;
      case "Drop":
        this.tab[i][6].next.put(j,to);
        break;

      default:
        break;
    }
  }

  public void update(int k,int j){

    // copy
    for (int i = 0; i < 7; i++) {
      // if (this.tab[j][i]==0 && this.tab[k][i]!=0) {
      //   this.tab[j][i] = this.tab[k][i];
      // }
      for (int name: this.tab[k][i].next.keySet()){
        // String key =name.toString();
        String value = this.tab[k][i].next.get(name).toString();  
        this.tab[j][i].next.put(name,value);
      } 
    }
    
    // update
    for (int i = 0; i < 70; i++) {
      for (int m = 0; m < 7; m++) {
        for (int key: this.tab[i][m].next.keySet()){
          // String key =name.toString();
          String value = this.tab[i][m].next.get(key).toString();  
          if (key == k) {
            this.tab[i][m].next.remove(k);
            this.tab[i][m].next.put(j,value);
          }
        }
      }
    }

    this.tab[k][7].next.remove(1);
    this.tab[k][7].next.put(0,"$");
  }
}


class Simple1 {

  
  public static void main(String args[]) throws ParseException, FileNotFoundException {
    
    Manager m = new Manager();
    m.Init();
    
    try {
      Simple1 parser = new Simple1(new FileInputStream("Prog.ihm"));
      parser.Input();
    } catch(FileNotFoundException ex){ }

    try
    {
        PrintWriter pr = new PrintWriter("Automate.aef");

        for (int i = 1; i < 70; i++) {
          if (Manager.tab[i][7].next.get(1) != null) {
            pr.println("\nEtat("+i+") : ");
            for(int j=0;j<7;j++){
              String s="";
              switch (j) {
                case 0:
                  s="Click";
                  break;
                case 1:
                  s="DbClick";
                  break;
                case 2:
                  s="ChrKeyPress";
                  break;
                case 3:
                  s="NumKeyPress";
                  break;
                case 4:
                  s="EntrerKeyPress";
                  break;
                case 5:
                  s="Drag";
                  break;
                case 6:
                  s="Drop";
                  break;
          
                default:
                  break;
              }
              if(Manager.mapToString(i,j).equals("")==false){
                pr.print("\t"+s+"\n");
                pr.print(Manager.mapToString(i,j));
              }
            }
          }
        }

        pr.close();
    }
    catch (Exception e)
    {
        e.printStackTrace();
        System.out.println("No such file exists.");
    }

    try
    {
        PrintWriter pr = new PrintWriter("Composants.gui"); 
        pr.printf("\n%-25s | %-125s |","Composant (Type)","Attributs");
        pr.printf("\n-----------------------------------------------------------------------------------------------------------------------------------------------------------");
        for (String name: Manager.Comps.keySet()){
          String key =name.toString();
          String value = Manager.Comps.get(name).toString();  
          //pr.println(key + ": " + value);  
          pr.printf("\n%-25s | %-125s |",key,value,"|");
          pr.printf("\n-----------------------------------------------------------------------------------------------------------------------------------------------------------");
        } 

        pr.close();
    }
    catch (Exception e)
    {
        e.printStackTrace();
        System.out.println("No such file exists.");
    }
  }

}

PARSER_END(Simple1)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <KWDEBUT: "DEBUT">
| <KWINTER: "INTERFACE">
| <KWCOMP: "COMP">
| <KWINIT: "INITIALISATIONS">
| <KWACT: "ACTIONS">
| <KWEVT: "EVT">
| <KWPROP: "PROP">
| <KWIF: "if" | "If">
| <KWTHEN: "Then" | "then">

| <KWTWOP: ":">
| <KWPV: ";">
| <KWEQU: "=">

| <ALTERNATIVE: "+">
| <CHOIX: "~">

| <TYPE: "Fenetre" | "Menu" | "Caneva" | "Bouton">
| <PROPTYPE: "Boolean" | "Bool"| "bool" |  "int">
| <EVENT: "Click" | "Drag" | "EnterPress" | "Dbclick" | "NumKeyPress"| "Drop"| "ChrKeyPress">
| < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
| <OP: "+" | "-">
| <COND: <ID> ("=" | "<>") <ID>>
| <AFFECT: <ID> ":=" <ID> (<OP> <ID>)* >
}


void Input() :
{
  Token id, type, p, t ;
  String[] Types = new String[5];
  int i = 0;
  String prop = "";
  String ty = "";
}

{
  <KWDEBUT>
  <KWINTER>

  /** COMP */
  (
    {prop = "[ "; }

    <KWCOMP> id = <ID> <KWTWOP> type = <TYPE> ("(" <ID> ")")?<KWPV>

    <KWPROP>
      ( p = <ID> {prop += p.image;}
      
      ( "," p=<ID> {prop += ", "+p.image;} )*  <KWTWOP>

      (t = <PROPTYPE> {ty += t.image;} |

      "{" t = <ID> {ty += "{" + t.image;} ("," t = <ID> {ty += "," + t.image;} )* "}" {ty+="}";} )  <KWPV>
        {prop += ": "+ ty +"; ";}
        {ty = "";}
      )*

    <KWEVT>
    (<EVENT> ("("<ID>")")? "{" (<KWIF> <COND> <KWTHEN> <AFFECT> | <AFFECT> )* (<KWPV> <AFFECT> )* "}")*
    {prop += "]";}
    {Manager.Comps.put(id.image+" ("+type.image+")", prop);}
    
    {prop = "";}
  )*

  <KWINIT>
  (<ID> "::" <ID> ":=" <ID> ";")*
  <KWACT>
  A()

  <EOF>
}

/** Actions section. */

Automate A():
{
  Automate a;
  Token id;
}
{
  "{" a=A() "}" Y(a) {return a;}
  | 
  a = Event() {return a;}
}

Automate Event():
{
  Automate a1;
  Token event;
  Token comp;
  Manager m = new Manager();
}

{
  {a1=new Automate();}
  
  event=<EVENT> "(" comp=<ID> ")"

  {m.add(a1.first.id , a1.last.id , event.image, comp.image );}

  Y(a1)
  
  {return a1;}
}

void Y(Automate ag):
{
  Automate ad, tmp;
  Manager m = new Manager();
}

{
  <KWPV> ad=A()
  {
    m.update(ad.first.id , ag.last.id);

    ag.last = ad.last;

    tmp=new Automate();
    tmp.first=ag.first;
    tmp.last=ad.last;
  }

  Y(tmp)

  | <CHOIX> ad=A()
  {
    m.update(ad.first.id,ag.first.id);
    m.update(ad.last.id,ag.last.id);


    tmp=new Automate();
    tmp.first=ag.first;
    tmp.last=ad.last;
  }
  Y(tmp) 

  | <ALTERNATIVE> ad=A()
  {
    m.update(ad.first.id,ag.first.id);

    tmp=new Automate(); 
    tmp.first=ag.first;
    
  }
  Y(tmp) 
  | ("a")*
}

